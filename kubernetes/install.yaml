---
apiVersion: v1
kind: Namespace
metadata:
  name: apptest

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: cache
  namespace: apptest
data: 
  cache.js : |
    const cache_config = {
      cacheControl: false, maxAge: 3000, 
      setHeaders: (res)=> { res.setHeader('Cache-Control','public, max-age=3')},
      lastModified: true, 
      etag: true
    }

    module.exports = cache_config;

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: appconfig
  namespace: apptest
data: 
  app.conf : |
    proxy_cache_path /tmp/nginx levels=1:2 keys_zone=my_zone:10m inactive=60m;
    proxy_cache_key "$scheme$request_method$host$request_uri";

    server {
      listen 5000;
      server_name _;
      location / { 
        # Proxy config
        proxy_redirect off;
        proxy_pass_header Server;
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_http_version 1.1; 
        proxy_pass http://nodeapp:3000/;

        # Cache config
        add_header X-Proxy-Cache $upstream_cache_status;
        proxy_cache my_zone;

        # Override Cache-Control max-age(to client)
        # expires 10s;

        # Kill cache
        # add_header Last-Modified $date_gmt;
        # add_header Cache-Control 'no-store, no-cache';
        # if_modified_since off;
        # expires off;
        # etag off;

        # Not ordinary options
        # proxy_cache_bypass $http_cache_control;
        # proxy_ignore_headers Cache-Control;
        # proxy_hide_header Cache-Control;
      }
    }

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nodeapp
  name: nodeapp
  namespace: apptest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nodeapp
  strategy: {}
  template:
    metadata:
      labels:
        app: nodeapp
    spec:
      containers:
      - name: nodeapp
        image: m1:5000/rayshoo/nodeapp:1.0
        imagePullPolicy: Always
        resources: {}
        env:
        - name: CONTEXT_PATH
          value: "/wol"
        livenessProbe:
          httpGet:
            path: /live
            port: 3000
            httpHeaders:
            - name: livecheck
              value: nodeapp
          initialDelaySeconds: 3
          periodSeconds: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 3000
            httpHeaders:
            - name: readycheck
              value: nodeapp
          initialDelaySeconds: 3
          periodSeconds: 3
        volumeMounts:
        - name: cache-config
          mountPath: /root/app/config
      volumes:
      - name: cache-config
        configMap:
          name: cache

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nodeapp
  name: nodeapp
  namespace: apptest
spec:
  clusterIP: None
  ports:
  - port: 3000
    protocol: TCP
    targetPort: 3000
  selector:
    app: nodeapp

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: apptest
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: m1:5000/rayshoo/nginx:1.0
        imagePullPolicy: Always
        resources: {}
        livenessProbe:
          httpGet:
            path: /live
            port: 5000
            httpHeaders:
            - name: livecheck
              value: nginx
          initialDelaySeconds: 3
          periodSeconds: 3
        volumeMounts:
        - name: appconfig
          mountPath: /etc/nginx/conf.d
      volumes:
      - name: appconfig
        configMap:
          name: appconfig

---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: nginx
  name: nginx
  namespace: apptest
spec:
  ports:
  - name: http
    port: 80
    protocol: TCP
    targetPort: 5000
  - name: https
    port: 443
    protocol: TCP
    targetPort: 5000
  selector:
    app: nginx
  type: LoadBalancer

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: apptest
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /$1
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
   #nginx.ingress.kubernetes.io/affinity: "cookie"
   #nginx.ingress.kubernetes.io/session-cookie-hash: "sha1"
   #nginx.ingress.kubernetes.io/session-cookie-name: "route"
  namespace: apptest
spec:
  rules:
  - http:
      paths:
      - path: /wol(?:\/(.*))?
        pathType: Prefix
        backend:
          service:
            name: nginx
            port:
              number: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-nginx-controller
  namespace: ingress-nginx
data:
  hsts: "false"
